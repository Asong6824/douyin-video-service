// Code generated by Kitex v0.8.0. DO NOT EDIT.

package videoservice

import (
	"context"
	video "github.com/Asong6824/douyin-video-service/kitex_gen/video"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Feed":         kitex.NewMethodInfo(feedHandler, newVideoServiceFeedArgs, newVideoServiceFeedResult, false),
		"PublishVideo": kitex.NewMethodInfo(publishVideoHandler, newVideoServicePublishVideoArgs, newVideoServicePublishVideoResult, false),
		"GetVideoList": kitex.NewMethodInfo(getVideoListHandler, newVideoServiceGetVideoListArgs, newVideoServiceGetVideoListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "video",
		"ServiceFilePath": `idl/video.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func feedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceFeedArgs)
	realResult := result.(*video.VideoServiceFeedResult)
	success, err := handler.(video.VideoService).Feed(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFeedArgs() interface{} {
	return video.NewVideoServiceFeedArgs()
}

func newVideoServiceFeedResult() interface{} {
	return video.NewVideoServiceFeedResult()
}

func publishVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePublishVideoArgs)
	realResult := result.(*video.VideoServicePublishVideoResult)
	success, err := handler.(video.VideoService).PublishVideo(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishVideoArgs() interface{} {
	return video.NewVideoServicePublishVideoArgs()
}

func newVideoServicePublishVideoResult() interface{} {
	return video.NewVideoServicePublishVideoResult()
}

func getVideoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetVideoListArgs)
	realResult := result.(*video.VideoServiceGetVideoListResult)
	success, err := handler.(video.VideoService).GetVideoList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideoListArgs() interface{} {
	return video.NewVideoServiceGetVideoListArgs()
}

func newVideoServiceGetVideoListResult() interface{} {
	return video.NewVideoServiceGetVideoListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Feed(ctx context.Context, request *video.FeedRequest) (r *video.FeedResponse, err error) {
	var _args video.VideoServiceFeedArgs
	_args.Request = request
	var _result video.VideoServiceFeedResult
	if err = p.c.Call(ctx, "Feed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishVideo(ctx context.Context, request *video.PublishVideoRequest) (r *video.PublishVideoResponse, err error) {
	var _args video.VideoServicePublishVideoArgs
	_args.Request = request
	var _result video.VideoServicePublishVideoResult
	if err = p.c.Call(ctx, "PublishVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoList(ctx context.Context, request *video.GetVideoListRequest) (r *video.GetVideoListResponse, err error) {
	var _args video.VideoServiceGetVideoListArgs
	_args.Request = request
	var _result video.VideoServiceGetVideoListResult
	if err = p.c.Call(ctx, "GetVideoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
